process PROD = {
	source = PoolSource {
     		 untracked vstring fileNames = {'file:simevent.root'}

     		 untracked int32 maxEvents = -1
     		 untracked uint32 debugVebosity = 10
     		 untracked bool   debugFlag     = true
		}
 
	module mix = MixingModule {         
                secsource input = PoolRASource {
                                    #vstring fileName = {'simevent_pu.root'}
				   untracked vstring fileNames = {'file:/afs/cern.ch/user/u/uberthon/public/CMSSW_0_5_0/src/SimGeneral/MixingModule/test/data/simevent.root'}
                                   # bool random = true
                                   # bool no_reuse = true
                
	        string type = "poisson"
        	double averageNumber = 0
        	int32 minBunch =xxx
        	int32 maxBunch =xxx
		int32 seed = 1234567
               }
        	int32 bunchspace =25
               }

	es_source = XMLIdealGeometryESSource 
		{ #FileInPath GeometryConfiguration = "SimG4Core/Application/test/SimConfiguration.xml"
                  #FileInPath GeometryConfiguration = "Geometry/DTGeometry/test/muonConfiguration.xml"
		   FileInPath GeometryConfiguration="Geometry/CMSCommonData/data/configuration.xml"
		   string rootNodeName = "cms:OCMS"
	 	}

	 es_source magfield = XMLIdealGeometryESSource {
               FileInPath GeometryConfiguration = "SimG4Core/Application/test/FieldConfiguration.xml"
               string rootNodeName ="MagneticFieldVolumes:MAGF"        
               }

	 es_module = VolumeBasedMagneticFieldESProducer {
 		    double findVolumeTolerance = 0.0
	 	    untracked bool cacheLastVolume = true
	            untracked bool timerOn = false
	}	

	es_module = DTGeometryESModule{}

	include "SimMuon/DTDigitizer/data/muondtdigi.cfi"
  
 	module dtDigiReader = DTDigiReader{}

	module out = PoolOutputModule {
	untracked string fileName = 'digi.root' 
	}	 

	path p = {mix,muondtdigi,dtDigiReader}
	endpath this_is_the_end = {out}

}

